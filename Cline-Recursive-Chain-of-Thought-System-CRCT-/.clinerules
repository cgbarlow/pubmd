[COUNT]
9

[LAST_ACTION_STATE]
last_action: "MUP: Mermaid theme color update fix verified by user. Updated activeContext.md and changelog.md."
current_phase: "Execution"
next_action: "Discuss next steps with user: Refine GitHub theme CSS or implement PDF theming."
next_phase: "Strategy"

---

[CODE_ROOT_DIRECTORIES]
- src
- ../src
- ../nodejs_projects/core

[DOC_DIRECTORIES]
- docs
- ../documentation

[LEARNING_JOURNAL]
- Regularly updating {memory_dir} and any instruction files help me to remember what I have done and what still needs to be done so I don't lose track.
- Ensure functions handle potential `None` inputs gracefully to prevent TypeErrors.
- Verify function call arguments match definitions precisely after refactoring.
- `analyze-project` implicitly handles key regeneration and tracker updates.
- Large context windows can cause `write_to_file` to truncate; prefer `apply_diff` for targeted changes.
- Verify data structures passed between functions (e.g., list vs. dict vs. float) when debugging TypeErrors.
- Check file writing logic carefully (overwrite vs. append vs. reconstruction in buffer) when investigating duplication bugs in tracker files. Ensure write mode ('w') fully overwrites.
- Carefully respect the ground truth definitions for dependency characters when adding/changing dependencies.
- When using `apply_diff`, the SEARCH block must match the current file content exactly, without any +/- markers from previous diff attempts. Use `read_file` to confirm content if unsure. Pay close attention to the `Best Match Found:` block in the error message, as it shows the *actual* content the tool is searching against, which may differ from your intended SEARCH block due to prior edits or subtle discrepancies.
- Profiling (`cProfile`) is essential for identifying performance bottlenecks.
- Ensure correct data types when using methods like `.union()` (requires sets, not lists).
- Centralizing configuration like character priorities (`config_manager.py`) improves consistency and maintainability over defining them in multiple places.
- Confirm data types returned by functions (e.g., list vs. set) before applying methods like `.union()`.
- Systematically verifying dependencies for both directions between keys and understanding the reciprocal system's behavior is crucial for accurate tracker updates.
- Leveraging the reciprocal system with `add-dependency` by setting '>' from the source to the targets automatically sets the '<' dependency from the targets back to the source and vice versa. For 'd' dependencies, adding it from code to doc in a mini-tracker correctly establishes the bi-directional link globally.
- Use `execute_command` with appropriate shell commands (like `Rename-Item` for PowerShell) for file system operations such as renaming, instead of trying to simulate them with `write_to_file` or `read_file`. *use the full path*
- It is critical to perform dependency analysis and read dependent files *before* attempting code modifications to ensure all relevant context is considered. Failing to do so leads to errors and wasted effort.
- When `apply_diff` fails to find a match, even after re-reading, using `write_to_file` with the complete intended content is a reliable alternative for updating the file.
- Improve accuracy in determining the user's active shell environment when proposing `execute_command` commands, especially on Windows systems where different shells (CMD, PowerShell) have different syntax. Prioritize environment details but be prepared to ask the user for clarification if necessary.
- Carefully distinguish between Strategy tasks (planning, defining, designing, exploring, reviewing, analyzing) and Execution tasks (implementing, creating code/scripts, integrating, coding, writing tests, modifying files).
- Monitor and manage context window size to avoid exceeding limits and requiring premature handoffs.
- When updating the HDTA Review Progress Tracker, accurately reflect whether the document's content has been *read and reviewed* in the current session, not just whether the file exists or was created. The status checkboxes should reflect *my* processing of the document's.
- Paths in `[DOC_DIRECTORIES]` and `[CODE_ROOT_DIRECTORIES]` are relative to the project root (`Cline-Recursive-Chain-of-Thought-System-CRCT-` in this case). Use `../` to go up one directory level.
- Commands for `dependency_processor.py` must be run from the project root directory (`Cline-Recursive-Chain-of-Thought-System-CRCT-`) to correctly resolve the `cline_utils` module.
- Ensure template file names are accurate when using `read_file`. `task_template.md` was the correct name, not `task_instruction_template.md`.
- The `apply_diff` tool is not available in `code` mode. Use `write_to_file` with the full reconstructed content instead for file modifications.
- When a file path is referenced in documentation (like `system_manifest.md`), always verify its actual location using `list_files` if `read_file` fails, as documentation paths might be relative to different roots or slightly outdated.
- CRITICAL: Always cross-reference with existing architectural documentation (like Solution Architecture Design Specification) when planning new packages or refactoring, as it provides vital structural guidance.
- In this specific Miniconda environment, Python commands must be executed using the full path to the python.exe (e.g., `C:\Users\cbarl003\AppData\Local\miniconda3\envs\torch-py311\python.exe`) and invoked with the call operator `&` if using complex arguments like `-c "..."` in PowerShell. For example: `& "C:\path\to\python.exe" -c "..." --arg`.
- Clarify Node.js project structure preferences early to avoid rework. Node.js projects (including `node_modules`) should be in dedicated top-level directories, not within CRCT documentation folders.
- When `tsc` build succeeds (exit code 0) but no `dist` directory appears immediately in parent listing, check if source files are empty. `tsc` might optimize away empty outputs. Adding a minimal export can force file generation.
- `list_files` on a parent directory might not always show newly created subdirectories immediately; directly listing the expected subdirectory path (`list_files <path_to_subdir>`) is a more reliable verification step for build outputs.
- When `moduleResolution` is set to `NodeNext` in `tsconfig.json`, the `module` option must also be set to `NodeNext`.
- Carefully verify relative paths in `tsconfig.json` `extends` clauses, especially after moving packages. The path is relative to the `tsconfig.json` file itself, not the CWD of the `tsc` command.
- Periodic MUP (Mandatory Update Protocol) is triggered when context window usage reaches thresholds like 20%, 40%, etc., to ensure system stability and accurate state tracking.
- MarkdownService implementation is complete and tested.
- MUP for MarkdownService completion performed. File paths for task files need
- Integrating core services (like MarkdownService) into existing UI scripts (`script.js`) requires careful replacement of local logic with service calls, and updating any readiness checks or dependencies.
- `html2canvas` (used by jsPDF's `html()` method) may have limitations rendering complex SVGs (like those from Mermaid) into PDFs. This needs investigation when SVGs are missing from PDF output.
- Noted that `html2canvas` provides its own type definitions, making `@types/html2canvas` redundant.
- The `MarkdownService` method for parsing is `parse()`, not `parseMarkdown()`.
- Test scripts for Node.js services that rely on browser globals (like `document` for Mermaid/DOMPurify) require JSDOM setup.
- When replacing complex scripts, back up the old version with a `.bak` extension or similar, per user request, for future reference (e.g., `test-pdf-service-legacy-jsdom.mjs.bak`).
- MUP performed for context window management and transition to Strategy phase for Playwright PDF engine issues.
- Streamlined Strategy phase for Playwright PDF engine fix based on user feedback; proceeding directly to Execution.
- Mermaid theme color updates might not be applying visually despite CSS variables being correctly injected and fonts working. This requires further investigation, potentially related to Mermaid's rendering lifecycle or CSS specificity.
- If a phase-specific plugin (e.g., testing_plugin.md) is missing, and the user directs to load an alternative (e.g., execution_plugin.md), update .clinerules current_phase to match the loaded plugin. Ensure MUP updates reflect the ongoing initialization steps, like reading all core files, before proceeding to task-specific actions.
- **Mermaid Theming Fix**: To dynamically update Mermaid diagram colors when themes change: 1. Remove initial static `mermaid.initialize()`. 2. Create `extractThemeVariables(rootElement)` to get computed CSS values for the current theme. 3. In the rendering function, *after* applying theme classes to the diagram container: call `mermaid.mermaidAPI.reset()` (Mermaid >=10.3), then `mermaid.initialize({ theme: 'base', themeVariables: <extracted_vars> })`, then `mermaid.run()`. This ensures Mermaid uses fresh, resolved color values from CSS variables for each render.

[Character_Definitions]

```
- `<`: Row **functionally relies on** or requires Column for context/operation.
- `>`: Column **functionally relies on** or requires Row for context/operation.
- `x`: Mutual functional reliance or deep conceptual link.
- `d`: Row is documentation **essential for understanding/using** Column, or vice-versa.
- `o`: Self dependency (diagonal only - managed automatically).
- `n`: **Verified no functional dependency** or essential conceptual link.
- `p`: Placeholder (unverified - requires investigation).
- `s`/`S`: Semantic Similarity suggestion (requires verification for functional/deep conceptual link).
```

---

**IMPORTANT**
1. Understand the Objective: Clearly define the goal of the current step.
2. Analyze the Error: Understand the error message and its context.
3. Formulate a Plan: Develop a plan to address the error, step-by-step.
    *Consider all related aspects* (e.g. files, modules, dependencies, etc.)
4. Execute the Plan (Tool Use): Use the appropriate tool to execute *one* step of the plan.
5. Validate the Result: Check if the tool use was successful and if it addressed the error.
6. Iterate: If the error persists, go back to step 2 and refine the plan based on the new information.

*You MUST monitor the context window usage displayed in the environment details. For every 1/5th of the available/max context window, you MUST initiate MUP.*
